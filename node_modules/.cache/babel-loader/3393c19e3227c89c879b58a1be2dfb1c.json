{"ast":null,"code":"import _slicedToArray from \"c:\\\\pipefy\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"c:\\\\pipefy\\\\src\\\\components\\\\Card\\\\index.js\";\nimport React, { useRef, useContext } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport BoardContext from '../Board/context';\nimport { Container, Label } from './style';\nexport default function Card({\n  data,\n  index,\n  listIndex\n}) {\n  const ref = useRef();\n\n  const _useContext = useContext(BoardContext),\n        move = _useContext.move;\n\n  const _useDrag = useDrag({\n    item: {\n      type: 'CARD',\n      index,\n      listIndex\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }),\n        _useDrag2 = _slicedToArray(_useDrag, 2),\n        isDragging = _useDrag2[0].isDragging,\n        dragRef = _useDrag2[1]; //Mover o Card para outra Lista\n\n\n  const _useDrop = useDrop({\n    accept: 'CARD',\n\n    hover(item, monitor) {\n      const draggedListIndex = item.listIndex; //const targetListIndex = listIndex;\n\n      const draggedIndex = item.index;\n      const targetIndex = index;\n\n      if (draggedIndex === targetIndex) {\n        return;\n      }\n\n      const targetSize = ref.current.getBoundingClientRect();\n      const targetCenter = (targetSize.bottom - targetSize.top) / 2;\n      const draggedOffset = monitor.getClientOffset();\n      const draggedTop = draggedOffset.y - targetSize.top;\n\n      if (draggedIndex < targetIndex && draggedTop < targetCenter) {\n        return;\n      }\n\n      if (draggedIndex > targetIndex && draggedTop > targetCenter) {\n        return;\n      }\n\n      move(draggedListIndex, draggedIndex, targetIndex);\n      item.index = targetIndex;\n    }\n\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        dropRef = _useDrop2[1];\n\n  dragRef(dropRef(ref));\n  return React.createElement(Container, {\n    ref: ref,\n    isDragging: isDragging,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, data.labels.map(label => React.createElement(Label, {\n    key: label,\n    color: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }))), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, data.content), data.user && React.createElement(\"img\", {\n    src: data.user,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["c:/pipefy/src/components/Card/index.js"],"names":["React","useRef","useContext","useDrag","useDrop","BoardContext","Container","Label","Card","data","index","listIndex","ref","move","item","type","collect","monitor","isDragging","dragRef","accept","hover","draggedListIndex","draggedIndex","targetIndex","targetSize","current","getBoundingClientRect","targetCenter","bottom","top","draggedOffset","getClientOffset","draggedTop","y","dropRef","labels","map","label","content","user"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SAAQC,OAAR,EAAiBC,OAAjB,QAA+B,WAA/B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,SAAjC;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAd,EAA0C;AACvD,QAAMC,GAAG,GAAGX,MAAM,EAAlB;;AADuD,sBAEtCC,UAAU,CAACG,YAAD,CAF4B;AAAA,QAE/CQ,IAF+C,eAE/CA,IAF+C;;AAAA,mBAIrBV,OAAO,CAAC;AACxCW,IAAAA,IAAI,EAAE;AAACC,MAAAA,IAAI,EAAE,MAAP;AAAeL,MAAAA,KAAf;AAAsBC,MAAAA;AAAtB,KADkC;AAExCK,IAAAA,OAAO,EAAEC,OAAO,KAAI;AAClBC,MAAAA,UAAU,EAAED,OAAO,CAACC,UAAR;AADM,KAAJ;AAFwB,GAAD,CAJc;AAAA;AAAA,QAI9CA,UAJ8C,gBAI9CA,UAJ8C;AAAA,QAIhCC,OAJgC,iBAWvD;;;AAXuD,mBAYlCf,OAAO,CAAC;AAC3BgB,IAAAA,MAAM,EAAE,MADmB;;AAE3BC,IAAAA,KAAK,CAACP,IAAD,EAAOG,OAAP,EAAgB;AACnB,YAAMK,gBAAgB,GAAGR,IAAI,CAACH,SAA9B,CADmB,CAEnB;;AAEA,YAAMY,YAAY,GAAGT,IAAI,CAACJ,KAA1B;AACA,YAAMc,WAAW,GAAGd,KAApB;;AAEA,UAAIa,YAAY,KAAKC,WAArB,EAAkC;AAChC;AACD;;AAED,YAAMC,UAAU,GAAGb,GAAG,CAACc,OAAJ,CAAYC,qBAAZ,EAAnB;AACA,YAAMC,YAAY,GAAG,CAACH,UAAU,CAACI,MAAX,GAAoBJ,UAAU,CAACK,GAAhC,IAAsC,CAA3D;AAEA,YAAMC,aAAa,GAAGd,OAAO,CAACe,eAAR,EAAtB;AACA,YAAMC,UAAU,GAAGF,aAAa,CAACG,CAAd,GAAkBT,UAAU,CAACK,GAAhD;;AAEA,UAAGP,YAAY,GAAGC,WAAf,IAA8BS,UAAU,GAAGL,YAA9C,EAA4D;AAC1D;AACD;;AAED,UAAGL,YAAY,GAAGC,WAAf,IAA8BS,UAAU,GAAGL,YAA9C,EAA4D;AAC1D;AACD;;AAEDf,MAAAA,IAAI,CAACS,gBAAD,EAAmBC,YAAnB,EAAiCC,WAAjC,CAAJ;AAEAV,MAAAA,IAAI,CAACJ,KAAL,GAAac,WAAb;AACD;;AA9B0B,GAAD,CAZ2B;AAAA;AAAA,QAY9CW,OAZ8C;;AA6CvDhB,EAAAA,OAAO,CAACgB,OAAO,CAACvB,GAAD,CAAR,CAAP;AAEA,SACC,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAEA,GAAhB;AAAqB,IAAA,UAAU,EAAEM,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,IAAI,CAAC2B,MAAL,CAAYC,GAAZ,CAAgBC,KAAK,IAAI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEA,KAAZ;AAAmB,IAAA,KAAK,EAAEA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzB,CADH,CADF,EAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI7B,IAAI,CAAC8B,OAAT,CAJH,EAKI9B,IAAI,CAAC+B,IAAL,IAAa;AAAK,IAAA,GAAG,EAAE/B,IAAI,CAAC+B,IAAf;AAAqB,IAAA,GAAG,EAAC,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALjB,CADD;AASD","sourcesContent":["import React, { useRef, useContext } from 'react';\r\nimport {useDrag, useDrop} from 'react-dnd';\r\nimport BoardContext from '../Board/context';\r\nimport { Container, Label } from './style';\r\n\r\nexport default function Card({ data, index, listIndex }) {\r\n  const ref = useRef();\r\n  const { move } = useContext(BoardContext);\r\n\r\n  const [{ isDragging }, dragRef] = useDrag({\r\n    item: {type: 'CARD', index, listIndex },\r\n    collect: monitor =>({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  //Mover o Card para outra Lista\r\n  const [, dropRef ] = useDrop({\r\n    accept: 'CARD',\r\n    hover(item, monitor) {\r\n      const draggedListIndex = item.listIndex;\r\n      //const targetListIndex = listIndex;\r\n\r\n      const draggedIndex = item.index;\r\n      const targetIndex = index;\r\n\r\n      if (draggedIndex === targetIndex) {\r\n        return;\r\n      }\r\n\r\n      const targetSize = ref.current.getBoundingClientRect();\r\n      const targetCenter = (targetSize.bottom - targetSize.top)/ 2;\r\n\r\n      const draggedOffset = monitor.getClientOffset();\r\n      const draggedTop = draggedOffset.y - targetSize.top;\r\n\r\n      if(draggedIndex < targetIndex && draggedTop < targetCenter) {\r\n        return;\r\n      }\r\n\r\n      if(draggedIndex > targetIndex && draggedTop > targetCenter) {\r\n        return;\r\n      }\r\n\r\n      move(draggedListIndex, draggedIndex, targetIndex);\r\n\r\n      item.index = targetIndex;\r\n    }\r\n  })\r\n\r\n  dragRef(dropRef(ref));\r\n\r\n  return(\r\n   <Container ref={ref} isDragging={isDragging}>\r\n     <header>\r\n       {data.labels.map(label => <Label key={label} color={label} />)}\r\n     </header>\r\n      <p>{data.content}</p>\r\n     { data.user && <img src={data.user} alt=\"\"/>}\r\n   </Container>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}